// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	ctx "github.com/asymptoter/tonx-take-home-test/pkg/ctx"
	mock "github.com/stretchr/testify/mock"

	service "github.com/asymptoter/tonx-take-home-test/internal/service"
)

// CampaignService is an autogenerated mock type for the CampaignService type
type CampaignService struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, p
func (_m *CampaignService) Create(c ctx.CTX, p service.CreateCampaignInput) (*service.Campaign, error) {
	ret := _m.Called(c, p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *service.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.CreateCampaignInput) (*service.Campaign, error)); ok {
		return rf(c, p)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.CreateCampaignInput) *service.Campaign); ok {
		r0 = rf(c, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, service.CreateCampaignInput) error); ok {
		r1 = rf(c, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCouponReservation provides a mock function with given fields: c, p
func (_m *CampaignService) CreateCouponReservation(c ctx.CTX, p service.CreateCouponReservationInput) (*service.CouponReservation, error) {
	ret := _m.Called(c, p)

	if len(ret) == 0 {
		panic("no return value specified for CreateCouponReservation")
	}

	var r0 *service.CouponReservation
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.CreateCouponReservationInput) (*service.CouponReservation, error)); ok {
		return rf(c, p)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.CreateCouponReservationInput) *service.CouponReservation); ok {
		r0 = rf(c, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.CouponReservation)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, service.CreateCouponReservationInput) error); ok {
		r1 = rf(c, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCouponReservation provides a mock function with given fields: c, p
func (_m *CampaignService) GetCouponReservation(c ctx.CTX, p service.GetCouponReservationInput) (*service.CouponReservation, error) {
	ret := _m.Called(c, p)

	if len(ret) == 0 {
		panic("no return value specified for GetCouponReservation")
	}

	var r0 *service.CouponReservation
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.GetCouponReservationInput) (*service.CouponReservation, error)); ok {
		return rf(c, p)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.GetCouponReservationInput) *service.CouponReservation); ok {
		r0 = rf(c, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.CouponReservation)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, service.GetCouponReservationInput) error); ok {
		r1 = rf(c, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatest provides a mock function with given fields: c, p
func (_m *CampaignService) GetLatest(c ctx.CTX, p service.GetLatestCampaignInput) (*service.Campaign, error) {
	ret := _m.Called(c, p)

	if len(ret) == 0 {
		panic("no return value specified for GetLatest")
	}

	var r0 *service.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.GetLatestCampaignInput) (*service.Campaign, error)); ok {
		return rf(c, p)
	}
	if rf, ok := ret.Get(0).(func(ctx.CTX, service.GetLatestCampaignInput) *service.Campaign); ok {
		r0 = rf(c, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(ctx.CTX, service.GetLatestCampaignInput) error); ok {
		r1 = rf(c, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCampaignService creates a new instance of CampaignService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCampaignService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CampaignService {
	mock := &CampaignService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
